// Referência aos elementos do DOM
const fileInput = document.getElementById('file-input');
const bancoInput = document.getElementById('banco');
const movimentoInput = document.getElementById('movimento');
const tabelaBody = document.querySelector('#tabela tbody');
const tabelaEdicaoBody = document.querySelector('#tabela-edicao tbody');
const desfazerBtn = document.getElementById('desfazer-btn');
const salvarEdicaoBtn = document.getElementById('salvar-edicao-btn');


// Variáveis de controle
let dados = [];
let excluidos = [];
let edicaoBackup = [];


// Eventos iniciais
fileInput.addEventListener('change', handleFile);
desfazerBtn.addEventListener('click', desfazerExclusao);
salvarEdicaoBtn.addEventListener('click', salvarEdicao);

// Função para tratar o arquivo carregado
function handleFile(event) {
  const file = event.target.files[0];
  if (!file) return;

  const ext = file.name.split('.').pop().toLowerCase();

  if (ext === 'txt') {
    const reader = new FileReader();
    reader.onload = () => {
      const linhas = reader.result.split('\n').map(l => l.trim()).filter(l => l);
      dados = linhas.map(linha => {
        const [data, historico, valorStr] = linha.split(',');
        return { data, historico, valor: parseFloat(valorStr.replace(',', '.')) };
      });
      renderTable();
    };
    reader.readAsText(file);
  } else if (ext === 'xlsx') {
    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });
      dados = json.slice(1).map(row => {
        const [data, historico, valor] = row;
        return { data, historico, valor: parseFloat(valor) };
      });
      renderTable();
    };
    reader.readAsArrayBuffer(file);
  }
}

function renderTable() {
  const banco = bancoInput.value.trim();
  const movimento = movimentoInput.value.trim();
  tabelaBody.innerHTML = '';

  dados.forEach((item, index) => {
    const isDebito = item.valor < 0;
    const valorAbs = Math.abs(item.valor);
    const debito = item.manual ? item.debito : (item.debito || (isDebito ? movimento : banco));
    const credito = item.manual ? item.credito : (item.credito || (isDebito ? banco : movimento));

    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${item.data}</td>
      <td>${debito}</td>
      <td>${credito}</td>
      <td>${item.historico}</td>
      <td>${valorAbs.toFixed(2).replace('.', ',')}</td>
      <td>
        <button onclick="adicionarAbaixo(${index})">➕</button>
        <button onclick="editarLinha(${index})">✏️</button>
        <button onclick="excluirLinha(${index})">❌</button>
      </td>
    `;
    tabelaBody.appendChild(row);
  });
}

function adicionarAbaixo(index) {
  dados.splice(index + 1, 0, { data: '', historico: '', valor: 0 });
  renderTable();
}

function excluirLinha(index) {
  excluidos.push(dados[index]);
  dados.splice(index, 1);
  renderTable();
}

function desfazerExclusao() {
  if (excluidos.length > 0) {
    dados.push(...excluidos);
    excluidos = [];
    renderTable();
  }
}

function editarLinha(index) {
  const banco = bancoInput.value.trim();
  const movimento = movimentoInput.value.trim();
  const item = dados[index];
  const valorAbs = Math.abs(item.valor);

  const isDebito = item.valor < 0;
  const debito = isDebito ? movimento : banco;
  const credito = isDebito ? banco : movimento;

  const bancoEstaNoDebito = debito === banco;
  const bancoEstaNoCredito = credito === banco;

  if (!bancoEstaNoDebito && !bancoEstaNoCredito) {
    tabelaEdicaoBody.innerHTML = '';
    document.getElementById('tabela-edicao').style.display = 'none';
    salvarEdicaoBtn.style.display = 'none';
    return;
  }

  edicaoBackup = [{
    data: item.data,
    debito: bancoEstaNoDebito ? banco : '',
    credito: bancoEstaNoCredito ? banco : '',
    historico: item.historico,
    valor: valorAbs.toFixed(2).replace('.', ',')
  }];

  tabelaEdicaoBody.innerHTML = `
    <tr>
      <td>${item.data}</td>
      <td>${bancoEstaNoDebito ? banco : ''}</td>
      <td>${bancoEstaNoCredito ? banco : ''}</td>
      <td>${item.historico}</td>
      <td>${valorAbs.toFixed(2).replace('.', ',')}</td>
      <td>
        <button onclick="duplicarLinhaEdicao('${item.data}', '${item.historico}')">➕</button>
        <button onclick="excluirLinhaEdicao(this)">❌</button>
      </td>
    </tr>
  `;

  document.getElementById('tabela-edicao').style.display = 'table';
  salvarEdicaoBtn.style.display = 'inline-block';
  atualizarTotaisEdicao();
}
window.editarLinha = editarLinha;

function atualizarTotaisEdicao() {
  let totalDebito = 0;
  let totalCredito = 0;

  const linhas = tabelaEdicaoBody.querySelectorAll('tr');
  linhas.forEach(linha => {
    const celulas = linha.querySelectorAll('td');
    const debito = celulas[1]?.textContent.trim();
    const credito = celulas[2]?.textContent.trim();
    const valorTexto = celulas[4]?.textContent.trim().replace(/\./g, '').replace(',', '.');
    const valor = parseFloat(valorTexto);

    if (!isNaN(valor)) {
      if (debito) totalDebito += valor;
      if (credito) totalCredito += valor;
    }
  });

  document.getElementById('total-debito').textContent = totalDebito.toFixed(2).replace('.', ',');
  document.getElementById('total-credito').textContent = totalCredito.toFixed(2).replace('.', ',');
}

function duplicarLinhaEdicao(data, historico) {
  let totalDebito = 0;
  let totalCredito = 0;

  const linhas = tabelaEdicaoBody.querySelectorAll('tr');
  linhas.forEach(linha => {
    const celulas = linha.querySelectorAll('td');
    const debito = celulas[1]?.textContent.trim();
    const credito = celulas[2]?.textContent.trim();
    const valorTexto = celulas[4]?.textContent.trim().replace(/\./g, '').replace(',', '.');

    const valor = parseFloat(valorTexto);
    if (!isNaN(valor) && valor > 0) {
      if (debito) totalDebito += valor;
      if (credito) totalCredito += valor;
    }
  });

  const diferenca = totalCredito - totalDebito;
  const valorFormatado = Math.abs(diferenca).toFixed(2).replace('.', ',');

  const novaLinha = document.createElement('tr');
  novaLinha.innerHTML = `
    <td>${data}</td>
    <td></td>
    <td></td>
    <td>${historico}</td>
    <td>${valorFormatado}</td>
    <td>
      <button onclick="duplicarLinhaEdicao('${data}', '${historico}')">➕</button>
      <button onclick="excluirLinhaEdicao(this)">❌</button>
    </td>
  `;
  tabelaEdicaoBody.appendChild(novaLinha);
  atualizarTotaisEdicao();
}
window.duplicarLinhaEdicao = duplicarLinhaEdicao;
///////********//// */
function excluirLinhaEdicao(botao) {
  const linha = botao.closest('tr');
  linha.remove();
  atualizarTotaisEdicao();
}

function desfazerEdicao() {
  tabelaEdicaoBody.innerHTML = '';

  edicaoBackup.forEach(item => {
    const novaLinha = document.createElement('tr');
    novaLinha.innerHTML = `
      <td>${item.data}</td>
      <td>${item.debito}</td>
      <td>${item.credito}</td>
      <td>${item.historico}</td>
      <td>${item.valor}</td>
      <td>
        <button onclick="duplicarLinhaEdicao('${item.data}', '${item.historico}')">➕</button>
        <button onclick="excluirLinhaEdicao(this)">❌</button>
      </td>
    `;
    tabelaEdicaoBody.appendChild(novaLinha);
  });

  salvarEdicaoBtn.style.display = 'inline-block';
  atualizarTotaisEdicao();
}

/*** */


function gerarArquivoTxt() {
  const tabelaBody = document.querySelector('#tabela tbody');
  if (!tabelaBody) {
    alert('Tabela não encontrada.');
    return;
  }

  const linhas = tabelaBody.querySelectorAll('tr');
  if (linhas.length === 0) {
    alert('Nenhum dado disponível para salvar.');
    return;
  }

  const conteudoFinal = Array.from(linhas).map((row, index) => {
    const celulas = row.querySelectorAll('td');
    if (celulas.length < 5) return ''; // ignora linhas incompletas

    // Captura os dados na ordem correta da tabela
    const debito = celulas[1].querySelector('input')?.value.trim() || celulas[0].textContent.trim();
    const credito = celulas[2].querySelector('input')?.value.trim() || celulas[1].textContent.trim();
    const historico = celulas[2].querySelector('input')?.value.trim() || celulas[2].textContent.trim();
    const dataBruta = celulas[0].querySelector('input')?.value.trim() || celulas[3].textContent.trim();
    const data = dataBruta.replace(/\D/g, ''); // remove / ou -
    const valorTexto = celulas[4].querySelector('input')?.value.trim() || celulas[4].textContent.trim();

    // Converte valor para formato 0,00
    const valorNumerico = parseFloat(valorTexto.replace(/\./g, '').replace(',', '.'));
    const valor = isNaN(valorNumerico)
      ? '0,00'
      : Math.abs(valorNumerico).toFixed(2).replace('.', ',');

    // Enumeração
    const numero = String(index + 1).padStart(3, '0');

    // Monta linha no padrão desejado
    return `||||${debito}|${credito}||N|N|${historico}|${data}|${valor}||N|${numero}|`;
  }).filter(linha => linha !== '').join('\n');

  // Cria e baixa o arquivo
  const blob = new Blob([conteudoFinal], { type: 'text/plain;charset=utf-8' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'lancamentos_formatados.txt';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

/** */
document.addEventListener("DOMContentLoaded", function () {
  const tabelaEdicaoBody = document.querySelector('#tabela-edicao tbody');

  document.addEventListener("click", function (e) {
    const celula = e.target.closest("td");
    if (!celula || celula.cellIndex === 5) return;

    celula.contentEditable = true;
    celula.focus();

    celula.addEventListener("blur", () => {
      celula.contentEditable = false;
      if (celula.closest('tbody') === tabelaEdicaoBody) {
        atualizarTotaisEdicao();
      }
    });

    celula.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        celula.blur();
      }
    });
  });
});
